{\rtf1\ansi\ansicpg949\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25140\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\fs24 \cf0   1 #include <stdio.h>\
  2 #include <stdlib.h>\
  3 #include <unistd.h>\
  4 #include <sys/types.h>\
  5 #include <sys/socket.h>\
  6 #include <string.h>\
  7 #include <sys/shm.h>\
  8 #include <pthread.h>\
  9 #include <signal.h>\
 10 #include <sys/wait.h>\
 11 #include <errno.h>\
 12 \
 13 #define PORTNUM 10223\
 14 #define LEN 256\
 15 #define WELCOME "Welcome to quiz show!\\nIt starts in a few seconds\\n"\
 16 #define SUCCESS "Answer!\\n"\
 17 #define FAILURE "Wrong!\\n"\
 18 #define ENTERNAME "Enter your name(MAX = 10): "\
 19 #define MAXUSER 4\
 20 \
 21 extern int make_server_socket();\
 22 void client_request(int fd);\
 23 void add_client(int fd);\
 24 void count_down(int fd, int index);\
 25 void receive_name(int fd);\
 26 int search_index(int fd);\
 27 void child_wait(int signum);\
 28 void init_shared_data();\
 29 void remove_client(int fd);\
 30 \
 31 struct sock_args\{\
 32     int sock[MAXUSER];\
 33     pid_t process_id[MAXUSER];\
 34     int s_time;\
 35     int usernum;\
 36     char user_name[MAXUSER][10];\
 37     float score[MAXUSER];\
 38     float successRate[MAXUSER];\
 39     int correct_user;\
 40     int count_start;\
 41     int start_index;\
 42     int start;\
 43 \};\
 44 \
 45 pthread_mutex_t usernum_lock = PTHREAD_MUTEX_INITIALIZER;\
 46 \
 47 int shmid;\
 48 struct sock_args *shared_data;\
 49 void *shared_memory = NULL;\
 50 key_t key = 123456;\
 51 \
 52  score[MAXUSER];\
 53     float successRate[MAXUSER];\
 54     int correct_user;\
 55 int main()\
 56 \{\
 57     int sock, fd;\
 58 \
 59     if((shmid=shmget(key,sizeof(int),IPC_CREAT|0666))==-1)\{\
 60         printf("shmget failed\\n");\
 61         exit(0);\
 62     \}\
 63 \
 64     if((shared_memory=shmat(shmid,NULL,0))==(void*)-1)\{\
 65         printf("shmat failed\\n");\
 66         exit(0);\
 67     \}\
 68 \
 69     shared_data = (struct sock_args*)shared_memory;\
 70 \
 71     init_shared_data();\
 72 \
 73     sock = make_server_socket(PORTNUM);\
 74 \
 75     if(sock == -1)\
 76     \{\
 77         fprintf(stderr, "failed create server\\n");\
 78         exit(1);\
 79     \}\
 80 \
 81     signal(SIGCHLD, child_wait);\
 82 \
 83     while(1)\
 84     \{\
 85         fd = accept(sock, NULL, NULL);\
 86         if(fd == -1)\
 87         \{\
 88             if(errno == EINTR) continue;\
 89             else break;\
 90         \}\
 91         if(shared_data->start == 1 || shared_data->usernum >= 4)\
 92         \{\
 93             write(fd, "quiz start or server full\\n", 28);\
 94             close(fd);\
 95             continue;\
 96         \}\
 97 \
 98         add_client(fd);\
 99         client_request(fd);\
100     \}\
101 \}\
102 \
103 void init_shared_data()\
104 \{\
105     int i;\
106 \
107     shared_data->usernum = 0;\
108     shared_data->s_time = 10;\
109     shared_data->count_start = 0;\
110     shared_data->start = 0;\
111 \
112     for(i=0; i<MAXUSER; i++)\
113     \{\
114         shared_data->sock[i] = -1;\
115         strcpy(shared_data->user_name[i], "");\
116         shared_data->score[i] = -1;\
117         shared_data->successRate[i] =-1;\
118     \}\
119 \}\
120 \
121 void child_wait(int signum)\
122 \{\
123     pid_t p;\
124     int i;\
125     time_t thetime;\
126     thetime = time(NULL);\
127 \
128     while( (p = waitpid(-1, NULL, WNOHANG)) > 0)\
129     \{\
130         for(i=0; i<shared_data->usernum; i++)\
131         \{\
132             if(p == shared_data->process_id[i])\
133             \{\
134                 close(shared_data->sock[i]);\
135                 printf("Disconnect ID: %s, %s", shared_data->user_name[i], ctime(&thetime));\
136                 pthread_mutex_lock(&usernum_lock);\
137                 remove_client(shared_data->sock[i]);\
138                 if(shared_data->usernum == 0) init_shared_data();\
139                 pthread_mutex_unlock(&usernum_lock);\
140                 break;\
141             \}\
142         \}\
143     \}\
144 \}\
145 \
146 void remove_client(int fd)\
147 \{\
148     int i, j, k;\
149     for(i=0; i<shared_data->usernum; i++)\
150     \{\
151         if(fd == shared_data->sock[i])\
152         \{\
153             for(; i<shared_data->usernum-1; i++)\
154             \{\
155                 shared_data->sock[i] = shared_data->sock[i+1];\
156                 shared_data->process_id[i] = shared_data->process_id[i+1];\
157                 shared_data->score[i] = shared_data->score[i+1];\
158                 shared_data->successRate[i] = shared_data->successRate[i+1];\
159                 strncpy(shared_data->user_name[i], shared_data->user_name[i+1], 10);\
160 \
161                 for(j=0; j<10; j++)\
162                 \{\
163                     if(shared_data->user_name[i+1][j] == '\\0')\
164                         for(k=j+1; k<10; k++)\
165                         \{\
166                             if(shared_data->user_name[i][k] == '\\0') break;\
167                             else shared_data->user_name[i][k] = '\\0';\
168                         \}\
169                 \}\
170             \}\
171             shared_data->usernum--;\
172             break;\
173         \}\
174     \}\
175 \}\
176 \
177 void add_client(int fd)\
178 \{\
179     pthread_mutex_lock(&usernum_lock);\
180     shared_data->sock[shared_data->usernum] = fd;\
181     shared_data->score[shared_data->usernum] = 0;\
182     shared_data->successRate[shared_data->usernum] = 0;\
183     shared_data->usernum++;\
184     pthread_mutex_unlock(&usernum_lock);\
185 \}\
186 \
187 void receive_name(int fd)\
188 \{\
189     char buf[LEN];\
190     int n;\
191     int index;\
192 \
193     time_t thetime;\
194     index = search_index(fd);\
195 \
196     write(fd, ENTERNAME, strlen(ENTERNAME));\
197 \
198     if((n = read(fd, buf, LEN)) == 0)\
199     \{\
200         exit(1);\
201     \}\
202 \
203     strncpy(shared_data->user_name[index], buf, n);\
204 \
205 \
206     //show time\
207     thetime = time(NULL);\
208     printf("Connect ID: %s, %s", shared_data->user_name[index], ctime(&thetime));\
209 \}\
210 \
211 void count_down(int fd, int index)\
212 \{\
213     int n;\
214     char buf[LEN];\
215 \
216     if(shared_data->count_start == 0)\
217     \{\
218         shared_data->start_index = index;\
219         shared_data->count_start = 1;\
220     \}\
221 \
222     write(fd, WELCOME, strlen(WELCOME));\
223 \
224     while(shared_data->s_time >=0)\
225     \{\
226          sprintf(buf, "%d.. ", shared_data->s_time);\
227          write(fd, buf, 5);\
228 \
229          sleep(1);\
230 \
231          if(index == shared_data->start_index)\
232          \{\
233              shared_data->s_time--;\
234              if(shared_data->s_time < 0) shared_data->start = 1;\
235          \}\
236     \}\
237 \
238     sprintf(buf, "%d user will start together\\n", shared_data->usernum);\
239     write(fd, buf, strlen(buf));\
240 \}\
241 \
242 int search_index(int fd)\
243 \{\
244     int i;\
245     for(i=0; i<shared_data->usernum; i++)\
246     \{\
247         if(fd == shared_data->sock[i]) return i;\
248     \}\
249 \
250     return -1;\
251 \}\
252 \
253 void result(int fd)\
254 \{\
255     char buf[LEN] = "";\
256     char temp[128];\
257     int i;\
258     FILE *fp;\
259 \
260     if((fp = fdopen(fd, "w")) == NULL)\
261         perror("fdopen");\
262 \
263     for(i=0; i<shared_data->usernum; i++)\
264     \{\
265         sprintf(temp, "%s's score: %.0f, percentage: %.1f\\n",shared_data->user_name[i], shared_data->score[i], shared_data->successRate[i]);\
266         strcat(buf, temp);\
267     \}\
268 \
269     write(fd, buf, LEN);\
270 \}\
271 void client_request(int fd)\
272 \{\
273     char buf[LEN], answer[LEN], scorebuf[LEN], rec_buf[LEN];\
274     int pid = fork();\
275     int i, n, index, r_num=1;\
276     FILE *quiz_file;\
277 \
278     index =  search_index(fd);\
279     if(index == -1)\
280         perror("index");\
281 \
282     if(pid == -1)\
283         perror("fork");\
284     else if(pid == 0)\
285     \{\
286         receive_name(fd);\
287         count_down(fd, index);\
288 \
289         quiz_file = fopen("quiz.txt", "r");\
290         if(quiz_file == NULL)\
291             perror("quiz file");\
292 \
293         while(fgets(buf, LEN, quiz_file) != 0 && fgets(answer, LEN, quiz_file) != 0)\
294         \{\
295             sleep(1);\
296 \
297             //send question\
298             write(fd, buf, strlen(buf));\
299 \
300             //send countdown\
301             for(i=10; i>=0; i--)\
302             \{\
303                 sprintf(buf, "%d..", i);\
304                 write(fd, buf, 3);\
305                 sleep(1);\
306             \}\
307             //read answer\
308             if((n = read(fd, rec_buf, LEN)) == 0)\
309             \{\
310                 fprintf(stderr,"Can't read to client\\n");\
311                 exit(1);\
312             \}\
313 \
314             pthread_mutex_lock(&usernum_lock);\
315             index = search_index(fd);\
316             pthread_mutex_unlock(&usernum_lock);\
317 \
318             //compare answer and send result\
319             if(!strncmp(rec_buf, answer, n))\
320             \{\
321                 write(fd, SUCCESS, strlen(SUCCESS));\
322                 shared_data->score[index] += 10;\
323                 shared_data->successRate[index] = (shared_data->score[index]/(10*r_num++)) * 100;\
324 \
325             \}\
326             else\
327             \{\
328                 write(fd, FAILURE, strlen(FAILURE));\
329                 shared_data->successRate[index] = (shared_data->score[index]/(10*r_num++)) * 100;\
330             \}\
331 \
332 \
333             //send score \
334             sprintf(scorebuf, "Score: %.0f Percentage: %.1f\\n", shared_data->score[index], shared_data->successRate[index]);\
335             write(fd, scorebuf, 26);\
336         \}\
337 \
338         sleep(1);\
339         write(fd, "end", 3);\
340         sleep(2);\
341         result(fd);\
342         sleep(3);\
343         close(fd);\
344         exit(1);\
345 \
346     \}\
347     else shared_data->process_id[index] = pid;\
}